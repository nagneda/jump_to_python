-클래스의 상속
기존 클래스에서 추가할 내용이 있거나 변경할 사항이 있을 시 
기존 클래스의 기능을 그대로 가져온 클래스를 생성하는 것을
'상속'이라고 한다. 상속하는 클래스는 상위의 클래스로 부모클래스
혹은 슈퍼클래스라고 하고 상속받는 클래스는 하위클래스로 자식클래스
서브클래스라고도 한다.
?여기서 의문점은 기존 클래스를 수정하면 되지 왜 굳이 상속 후 변경이나
기능 추가를 해야할까 싶을 수 있는데 기존 클래스가 내장된 라이브러리
형태로 제공된다던지 수정할 수 없는 경우에 보통 상속을 사용한다.
사용방법은 기존클래스 명을 상속받을 클래스 다음에 인수로서 사용하면 된다.
class Kim: 이라는 클래스가 있을때 Kim을 상속받는 Lee를 만들고 싶다면

class Lee(Kim):으로 작성시 Kim의 생성자든 함수든 모두 공유하며 사용가능

-메소드 오버라이딩
부모클래스에 있는 메소드를 자식클래스에서 동일한 이름으로 덮어쓰기 하는것을
메소드 오버라이딩이라 부르며 자식클래스의 인스턴스로 메소드 실행시
자식클래스에 새로 선언한 메소드로 실행됨. 다만 부모클래스의 인스턴스로
메소드 실행시에는 부모클래스에 있는(수정하지 않은 메소드)메소드로 실행
class Car:
  def drive(self):
    print('수퍼클래스의 드라이브입니다')

class Bike(Car):
  def drive(self):
    print('자식클래스의 드라이브입니다')

a=Car()
b=Bike()
a.drive()
b.drive()
다음과 같은 프로그램을 실행시킬때 출력은 
수퍼클래스의 드라이브입니다.
자식클래스의 드라이브입니다. 라고 나옴. 클래스 Bike의 drive메소드를
지울시에는 Car의 drive메소드가 실행되어 수퍼클래스의 드라이브입니다가 출력.
헷갈린다면 직접 예제를 실행시켜보자

-클래스 변수
클래스 내에서 선언한 변수를 클래스 변수라 부르며 함수내의 지역변수와
비슷한 개념이라고 생각하면 될듯하다. 객체 자신을 나타내는 self같은 매개변수를
적지 않아도 되고 일반 변수선언과 방법은 같다. 객체변수와 다른 점은 모든 객체가
클래스 변수를 공유한다는 점이다. 
class Student:
    school='서울대학교'
다음과 같이 school이라는 변수를 생성한 후 school을 불러와보자.
print(Student.school)
다음과 같이 사용할 수도 있고 클래스의 인스턴스가 있다면 인스턴스를 이용해
불러올 수도 있다.

a=Student()
b=Student()
print(a.school,b.school)
둘다 동일한 결과를 가져온다.
다만 여기서 중요한 것은 school의 값을 바꾸기 위해서는 Student.school=변경할 값
의 형태로 바꿔줘야한다. a.school=값  의 형태로 바꾸게되면 a라는 객체의 school이라는
객체변수를 새로 선언하는 것과 같은 꼴이 된다. 사실 클래스 변수보다 객체변수를 
훨씬 많이 사용하기 때문에 그렇게 중요하지는 않은 것 같다..


