# #파이썬에서 자료형은 우리가 앞으로 다룰 데이터들의 종류이며 숫자형 문자열 자료형 등 여러가지가 있다.
# #전체적인 내용을 정리하기도 하겠지만 새롭게 알게 된 내용을 위주로 정리하는것에 목적을 두겠다.

# *숫자형

# 정수형(integer) : 말 그대로 정수를 뜻함. int함수 쓸때 그 int
# 실수형(floating-point) : 소수점이 포함된 숫자. float 함수도 존재.

# *문자열 자료형

# 문자열(string)은 기본적으로 양쪽의 따옴표('',"")로 구성돼있고 따옴표안의 것은 문자열로 인식하게 돼있다.
# -따옴표안의 따옴표를 사용하고 싶을때
#     안쪽에 사용할 따옴표와 바깥쪽 문자열을 나타내는 따옴표가 달라야 한다.(큰이든 작은이든 안과 바깥이 다르기만 하면됨)
#     ex)>>>'python is "" good' (O)
#        >>>'python is 'good'(x)
#     -백슬래시(\)를 앞에 삽입하여 이용하기
#     ex)'\'python is good\''
# [이스케이프 코드] : 문장을 처리할때 편리한 기능을 제공하기 위해 존재. 백슬래쉬와 문자를 조합한 코드.
#                     ex)\n (줄바꿈), \t(탭), \\(백슬래쉬 문자로서 사용) 등이 있다.
문자열은 그 요소값을 바꿀 수 없다. immutable한 자료형이라고도 부른다. 덧붙이자면 컴퓨터의 기본 정보 단위는 비트이다.
비트는 0과1로 이루어져있으며 8비트는 1바이트며 1024바이트는 1키로바이트다. 이것이 우리가 일반적으로 아는 '용량'의 단위이다.
용량은 즉 메모리 공간을 뜻한다. 여기서 실수형은 64비트 정수형은 32비트의 메모리를 사용하여 값을 저장하고 문자열(파이썬에서는 문자형이
아닌 문자열만 존재한다.)은 16비트를 사용한다. 아스키코드(알파벳과 등등의 특수문자 등)는 8비트로만 사용할 수 있지만 한국어는 16비트(유니코드)를
사용하기 때문이다. 문자열의 인덱싱이 가능한 이유도 문자열은 16비트짜리 메모리가 이어져있는 형태기 때문에 한글자 한글자의 데이터를 따올 수 있다.

그래서 문자열의 요소값을 직접 바꿀순 없어도 간접적으로 바꿀 순 있다.
a='pithon' << python으로 바꾸고싶을때
a[:1]+'y'+a[2:] 슬라이싱을 이용하면 가능하긴 하다. 혹은 내가 아는 방법으로는 리스트화 시킨 후 인덱싱을 통해 변경.

-문자열 포매팅(%를 이용)
    문자열안의 특정한 값을 바꿔주는 기능이 포매팅이다. 
    %d는 정수형 %s는 문자열 %f는 실수형을 나타낸다.
    >>> 'I eat %d apples'%3 다음과 같이 문자열이 끝나고 %값 혹은 문자열을 대입하면 된다.
    %뒤에는 당연하게도 변수가 들어와도 된다.
    2개 이상의 값을 넣기 위해서는 %(3,5)이런식으로 괄호안에 콤마로 구분해준다.
    %s는 %에 대입되는 값이 정수든 실수든 모든것을 문자열로 바꾼다.
    즉 '파이는 %s입니다'%3.141592 라는 실수를 대입해도 문자열로 받아들인다.
    문자열로써 %를 사용하기 위해서는 %%를 사용. 이스케이프 코드의 \\와 비슷.

-문자열 관련 기능
    >>>'%10s'%'hi' 의 코드는 어떤 의미일까. 10만큼의 공간을 가진 문자열을 오른쪽으로 정렬해라는 뜻이다.
    출력은 '      hi'이런식으로 나올 것이다. 왼쪽으로 정렬하고 싶다면 10앞에 -를 붙여주면 된다.
    실수를 원하는 소수점까지 표현하기 위해서는 "0.5f"%3.12525667 라고 코드를 작성
    0은 문자열 공간을 뜻하고(사실 문자열 공간보다 문자열이 길다면 그냥 공백없이 문자열 생성. 즉 공백의 의미가 없어짐)
    .5는 소수점 5째 자리까지 표현한다는 뜻. 다만 뒤의 3.1252부분을 문자열로 바꾸고 %0.5s로 한다면 결과는 조금 다르게 나온다.
    정확한 이유는 잘 모르겠음. 
    >>>"%10.4f"%3.1256533637
    출력 : '    3.1256'

-format을 이용한 문자열 포매팅
    format을 이용할 때는 %s같은 문자열 포맷코드가 아닌 중괄호{}를 사용한다. 중괄호 안은 비어도 되지만
    일반적으로 0을 넣고 사용. 여기서 0은 format에 들어가는 값의 순서를 말함. 인덱스 항목임. 여러개일시 순서대로 0,1,2,3...으로 사용하면 된다.
    {}안에는 변수명이 들어가도 되지만 .format부분에서 변수의 값을 지정해줘야 함. f문자열 포매팅을 이용하면
    {변수명}만으로도 사용 가능. 이후에 서술. 
    정렬하기 위해서는 '{0:>10}'.format('hi') 출력 : '        hi'
    %로 포매팅하는 방법과 어느정도 비슷하다. 콜론(:)을 입력 후 공백문자 정렬 방향 부등호(< , >)를 기입하고(^ 이건 가운데정렬) 문자열공간(10)을 설정해준다.
    정렬 후의 공백을 채우기 위해서는 '{0:=<20'.format('안녕') 이렇게 콜론 다음에 공백을 치울 문자를 작성하면 됨.
    출력 : '안녕======================'
    소수점 표현시는 %포매팅과 동일하게 .4f의 형태로 사용
    '{0:10.4f}'.format(4.1232135) 출력 : '    4.1232' 
    소수점을 출력할때는 방향을 지정하지 않아도 오른쪽에 자동 출력. 

-f문자열 포매팅
    파이썬 3.6버전부터 제공하는 포매팅 기능. 변수가 지정돼있으면 바로 중괄호안에 변수명 기입 후 사용하면됨
    a=30, b='김영찬'
    f'저는 {b}이고 {a}살입니다' 이런식으로 문자열앞에 f만 붙여주면됨.
    공백채우기와 정렬은 format 포매팅과 동일하나 중괄호안의 0이나 변수자리에 바로 값이 들어가면됨
    ex) '{0:=>10}'.format('뭐') == f'{'뭐':=>10}'

-문자열 관련 함수(메소드?)
    a라는 문자열이 있다고 쳤을때
    a.count() = 괄호안의 문자가 a안에 몇개있는지 카운트
    a.find() = 괄호안의 문자를 인덱싱 a.index()와 다른점은 find는 없을 시 -1을 반환 index는 오류발생 
    a.upper() = 대문자화 시키기
    a.lower() = 소문자화 시키기
    a.replace('aa','bb') = 'aa'를 'bb'로 치환
    split과 strip은 알고있기에 생략.
